(function () {
  'use strict';

  var numberRoom = void 0,
      map = void 0,
      message = void 0;

  var init = function init() {
    numberRoom = document.getElementById('roomNumber');
    map = document.getElementById('map');
    message = document.getElementById('message');
    initKeys();
    initButtons();
  };

  var setNumberRoom = function setNumberRoom(v) {
    return numberRoom.innerHTML = v;
  };

  var switchShowMap = function switchShowMap(v) {
    return map.className == 'hidden' ? map.className = 'show' : map.className = 'hidden';
  };

  var setMessage = function setMessage(text) {
    message.className = 'show';
    message.innerHTML = text;
    setTimeout(function () {
      message.innerHTML = '';
      message.className = 'hidden';
    }, 5000);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var keys = {
    up: false,
    left: false,
    right: false,
    s: false,
    m: false
  };

  var keyUpdate = function keyUpdate(keyEvent, down) {
    switch (keyEvent.keyCode) {
      case 38:
        keys.up = down;
        break;
      case 37:
        keys.left = down;
        break;
      case 39:
        keys.right = down;
        break;
      case 83:
        // s
        onKeyS();
        break;
      case 77:
        // m
        if (down) switchShowMap();
        break;
    }
  };

  var initKeys = function initKeys() {
    document.addEventListener('keydown', function (event) {
      return keyUpdate(event, true);
    });
    document.addEventListener('keyup', function (event) {
      return keyUpdate(event, false);
    });
  };

  var initButtons = function initButtons() {
    var buttLeft = document.getElementById('button-left');
    buttLeft.addEventListener('touchstart', function () {
      keys.left = true;
    }, false);
    buttLeft.addEventListener('touchend', function () {
      keys.left = false;
    }, false);
    var buttRight = document.getElementById('button-right');
    buttRight.addEventListener('touchstart', function () {
      keys.right = true;
    }, false);
    buttRight.addEventListener('touchend', function () {
      keys.right = false;
    }, false);
    var buttForvard = document.getElementById('button-forvard');
    buttForvard.addEventListener('touchstart', function () {
      keys.up = true;
    }, false);
    buttForvard.addEventListener('touchend', function () {
      keys.up = false;
    }, false);
    var buttMap = document.getElementById('button-map');
    buttMap.addEventListener('touchend', function () {
      switchShowMap();
    }, false);
  };

  var onKeyS = function onKeyS() {};

  var setActionKeyS = function setActionKeyS(f) {
    return onKeyS = f;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var setStartButton = function setStartButton(on) {
    var preloader = document.getElementById('preloader');
    preloader.className = 'hidden';
    var startBtn = document.getElementById('button-start');
    startBtn.className = 'show';
    startBtn.addEventListener('touchstart', function (e) {
      if (e.type === 'touchstart') {
        var butts = document.getElementById('buttons');
        butts.style.display = 'flex';
        var app = document.getElementById('app');
        if (app.requestFullScreen) {
          app.requestFullScreen();
        } else if (app.mozRequestFullScreen) {
          app.mozRequestFullScreen();
        } else if (app.webkitRequestFullScreen) {
          app.webkitRequestFullScreen();
        }
      }
    });
    startBtn.addEventListener('mousedown', function () {
      var app = document.getElementById('app');
      app.className = 'show';
      var pr = document.getElementById('start-screen');
      pr.className = 'hidden';
      on();
    });
  };

  var assets = {
    textures: {
      stone: {
        map: null,
        src: 'assets/stone.jpg'
      },
      wood: {
        map: null,
        src: 'assets/wood.jpg'
      },
      books: {
        map: null,
        src: 'assets/books.jpg'
      },
      window: {
        map: null,
        src: 'assets/window.jpg'
      }
    },
    geoms: {
      lab: {
        geom: null,
        src: 'assets/walls.obj'
      }
    }
  };

  var actionsLoad = [],
      loaded = 0;

  var loadAssets = function loadAssets(on) {
    var actionsLoadTextures = setLoadTextures(assets.textures, nextLoad);
    var actionLoadGeoms = setLoadGeoms(assets.geoms, nextLoad);
    actionsLoad = actionsLoadTextures.concat(actionLoadGeoms);
    actionsLoad.push(on);
    actionsLoad[0]();
  };

  var nextLoad = function nextLoad() {
    loaded++;
    actionsLoad[loaded]();
  };

  var setLoadTextures = function setLoadTextures(textures, onload) {
    var textureLoader = new THREE.TextureLoader();
    var actions = [];

    var _loop = function _loop(key) {
      actions.push(function () {
        textureLoader.load(textures[key].src, function (img) {
          textures[key].map = img;
          onload();
        });
      });
    };

    for (var key in textures) {
      _loop(key);
    }
    return actions;
  };

  var setLoadGeoms = function setLoadGeoms(geoms, onload) {
    var objLoader = new THREE.OBJLoader();
    var actions = [];

    var _loop2 = function _loop2(key) {
      actions.push(function () {
        objLoader.load(geoms[key].src, function (obj) {
          geoms[key].geom = obj;
          onload();
        });
      });
    };

    for (var key in geoms) {
      _loop2(key);
    }
    return actions;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var materials = {};

  var initMaterials = function initMaterials() {
    materials.stone = new THREE.MeshPhongMaterial({
      map: assets.textures.stone.map
    });
    materials.stone.map.wrapS = materials.stone.map.wrapT = THREE.RepeatWrapping;
    materials.books = new THREE.MeshPhongMaterial({
      map: assets.textures.books.map,
      color: 0x282115
    });
    materials.wood = new THREE.MeshPhongMaterial({
      map: assets.textures.wood.map,
      color: 0xffffff
    });
    materials.books.map.wrapS = materials.books.map.wrapT = THREE.RepeatWrapping;
    materials.easy = new THREE.MeshPhongMaterial({ color: 0xaaffff });
    materials.window = new THREE.MeshPhongMaterial({ map: assets.textures.window.map });
    materials.mirror = new THREE.MeshPhongMaterial({ color: 0xff00 });
  };

  var createMaterialLetter = function createMaterialLetter(text, color) {
    if (assets.textures[text]) return;
    var size = 100;
    var canvas = document.createElement("canvas");
    var context = canvas.getContext("2d");
    context.font = size + "pt Arial";
    context.strokeStyle = "white";
    context.textAlign = "bottom";
    context.fillStyle = "white";
    context.fillText(text, 100, canvas.height * 0.8);
    var texture = new THREE.Texture(canvas);
    texture.needsUpdate = true;
    assets.textures[text] = {};
    assets.textures[text].map = texture;
    materials[text] = new THREE.MeshBasicMaterial({
      color: 0xffffff,
      opacity: 1,
      alphaMap: assets.textures[text].map,
      transparent: true
    });
    materials[text].needsUpdate = true;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var camera = void 0,
      collisionMesh = void 0,
      pLight = void 0,
      scene = void 0,
      renderer = void 0;

  var initScene = function initScene() {
    renderer = new THREE.WebGLRenderer({
      canvas: document.getElementById('myCanvas'),
      antialias: true
    });
    renderer.setClearColor(0x000000);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera = new THREE.PerspectiveCamera(120, window.innerWidth / window.innerHeight, 0.1, 50);
    camera.position.y = 1.7;
    //camera.position.x = 66
    //camera.position.z = 5
    camera.position.x = -3;
    camera.position.z = 47;
    collisionMesh = new THREE.Mesh(new THREE.BoxGeometry(0.001, 0.001, 0.001), new THREE.MeshBasicMaterial({ color: 0xff0000 }));
    collisionMesh.position.z = -1;
    scene = new THREE.Scene();
    scene.add(camera);
    camera.add(collisionMesh);
    scene.fog = new THREE.FogExp2(0x1c1614, 0.05, 100);
    var lightA = new THREE.AmbientLight(0xffffff, 1.2);
    lightA.position.set(5, 5, 5);
    scene.add(lightA);
    pLight = new THREE.PointLight(0x615d19, 3.5);
    pLight.position.set(0, 5, 0);
    scene.add(pLight);
    var floorGeometry = new THREE.PlaneGeometry(1000, 1000, 5, 5);
    var floorMap = materials.stone.map.clone();
    var floorMat = new THREE.MeshPhongMaterial({ map: floorMap });
    var floorMesh = new THREE.Mesh(floorGeometry, floorMat);
    floorMesh.material.map.repeat.set(100, 100);
    floorMap.needsUpdate = true;
    floorMesh.position.y = 6.0;
    floorMesh.rotation.x = 0.5 * Math.PI;
    scene.add(floorMesh);
  };

  var setOnResize = function setOnResize() {
    window.onresize = function () {
      renderer.setSize(window.innerWidth, window.innerHeight);
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
    };
  };

  var mirrorCam = void 0,
      mirrorMap = void 0;

  var prepearMirrorRenderer = function prepearMirrorRenderer() {
    mirrorCam = new THREE.PerspectiveCamera(120, 2.2 / 3.1, 0.1, 50);
    mirrorCam.position.set(-3.7, 1.7, 47.7);
    mirrorMap = new THREE.WebGLRenderTarget(100, 200, { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter });
    materials.mirror = new THREE.MeshBasicMaterial({ map: mirrorMap.texture });
    mirror.material = materials.mirror;
    mirror.material.needsUpdate = true;
  };

  var updateMirrorDoor = function updateMirrorDoor() {
    mirrorCam.rotation.y = camera.rotation.y - 3.14;
    renderer.render(scene, mirrorCam, mirrorMap);
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var mirror = null;

  var addLabirintToScene = function addLabirintToScene(ARTEFACTS) {
    ARTEFACTS.secretDoor = new THREE.Group();
    scene.add(ARTEFACTS.secretDoor);
    assets.geoms.lab.geom.traverse(function (child) {
      if (child instanceof THREE.Mesh != true) {
        if (checkChildName(child.name, 'room')) setCollisionRoom(child, 'room');
        if (checkChildName(child.name, 'secret')) setCollisionRoom(child, 'secret');
        if (checkChildName(child.name, 'exit')) setCollisionRoom(child, 'exit');
        if (checkChildName(child.name, 'password')) setCollisionRoom(child, 'password');
        if (checkChildName(child.name, 'book_area')) setCollisionRoom(child, 'secretBook');
        return;
      }
      if (child.name == 'books') {
        var mesh = new THREE.Mesh(child.geometry, materials.books);
        scene.add(mesh);
      } else if (child.name == 'window') {
        var _mesh = new THREE.Mesh(child.geometry, materials.window);
        scene.add(_mesh);
      } else if (child.name == 'book') {
        var _mesh2 = new THREE.Mesh(child.geometry, materials.wood);
        scene.add(_mesh2);
        ARTEFACTS.secretBook = _mesh2;
      } else if (child.name == 'mirror_wood') {
        var _mesh3 = new THREE.Mesh(child.geometry, materials.wood);
        ARTEFACTS.secretDoor.add(_mesh3);
      } else if (child.name == 'mirror') {
        var _mesh4 = new THREE.Mesh(child.geometry, materials.mirror);
        ARTEFACTS.secretDoor.add(_mesh4);
        mirror = _mesh4;
      } else if (checkChildName(child.name, 'letter')) {
        var letter = child.name.substring(child.name.length - 1, child.name.length);
        createMaterialLetter(letter);
        var _mesh5 = new THREE.Mesh(child.geometry, materials[letter]);
        scene.add(_mesh5);
      } else {
        var _mesh6 = new THREE.Mesh(child.geometry, materials.stone);
        scene.add(_mesh6);
      }
    });
  };

  var checkChildName = function checkChildName(string, val) {
    if (~string.indexOf(val)) {
      return true;
    }
    return false;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var arrRooms = [],
      arrSecrets = [],
      arrExits = [],
      arrPasswords = [],
      arrSecretBooks = [];

  var setCollisionRoom = function setCollisionRoom(geom, type) {
    var verticies = geom.geometry.attributes.position.array;
    var verts = [];
    for (var i = 0; i < verticies.length - 3; i += 3) {
      verts.push(new SAT.Vector(verticies[i], verticies[i + 2]));
    }
    var room = {
      name: geom.name,
      poligon: new SAT.Polygon(new SAT.Vector(), verts)
    };
    if (type == 'room') arrRooms.push(room);
    if (type == 'secret') arrSecrets.push(room);
    if (type == 'exit') arrExits.push(room);
    if (type == 'password') arrPasswords.push(room);
    if (type == 'secretBook') arrSecretBooks.push(room);
  };

  var concatSecretAndRoomsAreas = function concatSecretAndRoomsAreas() {
    [].push.apply(arrRooms, arrSecrets);
  };

  var checkPlayerCollision = function checkPlayerCollision(areas) {
    var inRoom = false;
    var point = new THREE.Vector3();
    collisionMesh.getWorldPosition(point);
    var v = new SAT.Vector(point.x, point.z);
    var arr = void 0;
    if (areas == 'rooms') arr = arrRooms;
    if (areas == 'secrets') arr = arrSecrets;
    if (areas == 'exits') arr = arrExits;
    if (areas == 'passwords') arr = arrPasswords;
    if (areas == 'secretBooks') arr = arrSecretBooks;
    arr.forEach(function (item) {
      if (SAT.pointInPolygon(v, item.poligon)) {
        inRoom = item.name;
      }
    });
    return inRoom;
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var currentRoom = void 0;

  var animate = function animate() {
    pLight.position.x = camera.position.x;
    pLight.position.z = camera.position.z;
    if (keys.up) updatePlayerMove();
    if (keys.left) camera.rotation.y += 0.02;
    if (keys.right) camera.rotation.y -= 0.02;
    updateArtefacts();
    renderer.render(scene, camera);
    if (currentRoom == 'room_S' || currentRoom == 'room_Y') updateMirrorDoor();
    requestAnimationFrame(animate);
  };

  var updatePlayerMove = function updatePlayerMove() {
    currentRoom = checkPlayerCollision('rooms');
    if (!currentRoom) return;
    updateParamsGame(checkPlayerCollision);
    camera.translateZ(-0.15);
    setNumberRoom(currentRoom); //+ ' <br/>' + camera.position.x + ' / ' + camera.position.z  
  };

  var updateParamsGame = function updateParamsGame() {},
      updateArtefacts = function updateArtefacts() {};

  var setFuncInUpdates = function setFuncInUpdates(fStatuses, fArtefacts) {
    updateParamsGame = fStatuses;
    updateArtefacts = fArtefacts;
  };

  window.onload = function () {
    init();
    loadAssets(function () {
      initMaterials();
      initScene();
      addLabirintToScene(artefacts);
      prepearMirrorRenderer();
      setOnResize();
      setFuncInUpdates(updateGameStatus, updateArtefacts$1);
      setActionKeyS(startAnimationDoor);
      setStartButton(animate);
      setMessage('Find list in room I');
    });
  };

  /*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

  var gameSTATE = 'gotoDoor'; //'findPassword' || 'gotoDoor' || 'findBook' || findExit' || 'win'
  var artefacts = {
    passwordPaper: null,
    secretDoor: null,
    secretBook: null
  };

  var updateGameStatus = function updateGameStatus(checkNear) {
    if (gameSTATE == 'findPassword') {
      if (checkNear('passwords')) {
        gameSTATE = 'gotoDoor';
        setMessage('You find some message. Find secret door.');
      }
    }
    if (gameSTATE == 'findBook') {
      if (checkNear('secrets')) {
        if (checkNear('secretBooks')) {
          setMessage('You find Book. Go to exit.');
          gameSTATE = 'findExit';
        }
      }
    }
    if (gameSTATE == 'findExit') {
      if (checkNear('exits')) {
        gameSTATE = 'win';
        setMessage('You win.');
      }
    }
  };

  var isDoorUp = false;

  var updateArtefacts$1 = function updateArtefacts() {
    if (gameSTATE == 'gotoDoor') {
      if (isDoorUp) {
        if (artefacts.secretDoor.position.y < 3) {
          artefacts.secretDoor.position.y += 0.05;
        } else {
          concatSecretAndRoomsAreas();
          gameSTATE = 'findBook';
          setMessage('Secret room is opened');
        }
      }
    }
  };

  var startAnimationDoor = function startAnimationDoor() {
    return isDoorUp = true;
  };

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
